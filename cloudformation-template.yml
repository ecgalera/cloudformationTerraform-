AWSTemplateFormatVersion: '2010-09-09'
Resources:
  MyVPC:
    Type: "AWS::EC2::VPC"
    Properties: 
      CidrBlock: "10.0.0.0/16"
      Tags: 
        - Key: "Name"
          Value: "MyVPC"

  MySubnet:
    Type: "AWS::EC2::Subnet"
    Properties: 
      VpcId: !Ref MyVPC
      CidrBlock: "10.0.1.0/24"
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: "Name"
          Value: "MySubnet"

  MyInternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags: 
        - Key: "Name"
          Value: "MyInternetGateway"

  AttachGateway:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway

  MyRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties: 
      VpcId: !Ref MyVPC
      Tags: 
        - Key: "Name"
          Value: "MyRouteTable"

  MyRoute:
    Type: "AWS::EC2::Route"
    Properties: 
      RouteTableId: !Ref MyRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref MyInternetGateway

  MyRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties: 
      SubnetId: !Ref MySubnet
      RouteTableId: !Ref MyRouteTable

  MySecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allow HTTP, Prometheus, Grafana, and SSH traffic"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: "80"
          ToPort: "80"
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: "3000"
          ToPort: "3000"
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: "9090"
          ToPort: "9090"
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: "9113"
          ToPort: "9113"
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: "22"
          ToPort: "22"
          CidrIp: "0.0.0.0/0"
      Tags: 
        - Key: "Name"
          Value: "MySecurityGroup"

  MyInstance:
    Type: "AWS::EC2::Instance"
    Properties:
      InstanceType: "t2.micro"
      SecurityGroupIds: [ !Ref MySecurityGroup ]
      SubnetId: !Ref MySubnet
      ImageId: "ami-063d43db0594b521b" # Reemplaza con la AMI de Amazon Linux 2 para tu regi√≥n
      KeyName: !Ref KeyName
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          amazon-linux-extras install docker -y
          service docker start
          usermod -aG docker ec2-user
          curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          cat <<EOF > /home/ec2-user/docker-compose.yml
          version: '3'
          services:
            nginx:
              image: nginx:latest
              ports:
                - "80:80"
              networks:
                - mynetwork
              volumes:
                - ./nginx.conf:/etc/nginx/nginx.conf
            grafana:
              image: grafana/grafana:latest
              ports:
                - "3000:3000"
              networks:
                - mynetwork
            prometheus:
              image: prom/prometheus:latest
              ports:
                - "9090:9090"
              networks:
                - mynetwork
              volumes:
                - ./prometheus.yml:/etc/prometheus/prometheus.yml
            nginx-exporter:
              image: nginx/nginx-prometheus-exporter:latest
              ports:
                - "9113:9113"
              networks:
                - mynetwork
              command: ["-nginx.scrape-uri=http://nginx/stub_status"]
          networks:
            mynetwork:
              driver: bridge
          EOF
          cat <<EOF > /home/ec2-user/nginx.conf
          server {
              location /stub_status {
                  stub_status on;
                  access_log off;
                  allow all;
              }

              location / {
                  proxy_pass http://localhost:8080;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
              }
          }
          EOF
          cat <<EOF > /home/ec2-user/prometheus.yml
          global:
            scrape_interval: 15s

          scrape_configs:
            - job_name: 'nginx'
              static_configs:
                - targets: ['nginx-exporter:9113']
          EOF
          docker-compose -f /home/ec2-user/docker-compose.yml up -d

Parameters:
  KeyName:
    Type: String
    Description:
